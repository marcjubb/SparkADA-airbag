(* Module for axiomatizing type "velocity_range" defined at airbag_system.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__velocity_range
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type velocity_range  = <range -300000 300000>
  
  function   first () requires { True } ensures  { True } returns
    int = -300000
  
  function   last () requires { True } ensures  { True } returns int = 300000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = velocity_range,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type velocity_range__ref  = { mutable velocity_range__content : velocity_range }
  
  function   velocity_range__ref_velocity_range__content__projection
    (a : velocity_range__ref) requires {  } ensures  {  } returns
    velocity_range = a.velocity_range__content
  
  meta model_projection function velocity_range__ref_velocity_range__content__projection
  
  meta inline:no function velocity_range__ref_velocity_range__content__projection
  
  function   velocity_range__havoc (x : velocity_range__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "velocity_range" defined at airbag_system.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__velocity_range__rep
  
  use        Airbag_system__velocity_range
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Airbag_system__velocity_range.velocity_range)
    requires { True } ensures  { True } returns
    int = (Airbag_system__velocity_range.velocity_range'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__velocity_range.velocity_range,
    predicate in_range = Airbag_system__velocity_range.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "time_range" defined at airbag_system.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__time_range
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type time_range  = <range 0 1000>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = time_range,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type time_range__ref  = { mutable time_range__content : time_range }
  
  function   time_range__ref_time_range__content__projection
    (a : time_range__ref) requires {  } ensures  {  } returns
    time_range = a.time_range__content
  
  meta model_projection function time_range__ref_time_range__content__projection
  
  meta inline:no function time_range__ref_time_range__content__projection
  
  function   time_range__havoc (x : time_range__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "time_range" defined at airbag_system.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__time_range__rep
  
  use        Airbag_system__time_range
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Airbag_system__time_range.time_range) requires
    { True } ensures  { True } returns
    int = (Airbag_system__time_range.time_range'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__time_range.time_range,
    predicate in_range = Airbag_system__time_range.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "acceleration_range" defined at airbag_system.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__acceleration_range
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type acceleration_range  = <range -300000 100000>
  
  function   first () requires { True } ensures  { True } returns
    int = -300000
  
  function   last () requires { True } ensures  { True } returns int = 100000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = acceleration_range,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type acceleration_range__ref  = { mutable acceleration_range__content : acceleration_range }
  
  function   acceleration_range__ref_acceleration_range__content__projection
    (a : acceleration_range__ref) requires {  } ensures  {  } returns
    acceleration_range = a.acceleration_range__content
  
  meta model_projection function acceleration_range__ref_acceleration_range__content__projection
  
  meta inline:no function acceleration_range__ref_acceleration_range__content__projection
  
  function   acceleration_range__havoc (x : acceleration_range__ref) requires
    {  } ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "acceleration_range" defined at airbag_system.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__acceleration_range__rep
  
  use        Airbag_system__acceleration_range
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep
    (x : Airbag_system__acceleration_range.acceleration_range) requires
    { True } ensures  { True } returns
    int = (Airbag_system__acceleration_range.acceleration_range'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__acceleration_range.acceleration_range,
    predicate in_range = Airbag_system__acceleration_range.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "status_airbag_system_type" defined at airbag_system.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_airbag_system_type
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type status_airbag_system_type  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = status_airbag_system_type,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type status_airbag_system_type__ref  = { mutable status_airbag_system_type__content : status_airbag_system_type }
  
  function  
    status_airbag_system_type__ref_status_airbag_system_type__content__projection
    (a : status_airbag_system_type__ref) requires {  } ensures  {  } returns
    status_airbag_system_type = a.status_airbag_system_type__content
  
  meta model_projection function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  meta inline:no function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  function   status_airbag_system_type__havoc
    (x : status_airbag_system_type__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "status_airbag_system_type" defined at airbag_system.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_airbag_system_type__rep
  
  use        Airbag_system__status_airbag_system_type
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__status_airbag_system_type.status_airbag_system_type,
    predicate in_range = Airbag_system__status_airbag_system_type.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "status_system_type" defined at airbag_system.ads:21, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Airbag_system__status_system_type__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__velocity_range
  use        Airbag_system__velocity_range__rep
  use        Airbag_system__time_range
  use        Airbag_system__time_range__rep
  use        Airbag_system__acceleration_range
  use        Airbag_system__acceleration_range__rep
  use        Airbag_system__status_airbag_system_type
  use        Airbag_system__status_airbag_system_type__rep
  
  type __split_fields  = { [model_trace:.940]
                           [name:Initial_Velocity_Measured]rec__airbag_system__status_system_type__initial_velocity_measured : Airbag_system__velocity_range.velocity_range;
                           [model_trace:.945]
                           [name:Final_Velocity_Measured]rec__airbag_system__status_system_type__final_velocity_measured : Airbag_system__velocity_range.velocity_range;
                           [name:Time_Difference_Measured]
                           [model_trace:.949]rec__airbag_system__status_system_type__time_difference_measured : Airbag_system__time_range.time_range;
                           [model_trace:.953]
                           [name:Acceleration_Measured]rec__airbag_system__status_system_type__acceleration_measured : Airbag_system__acceleration_range.acceleration_range;
                           [model_trace:.957]
                           [name:Status_Airbag_System]rec__airbag_system__status_system_type__status_airbag_system : Airbag_system__status_airbag_system_type.status_airbag_system_type }
  
  function [model_trace:.940] [name:Initial_Velocity_Measured] 
    __split_fields_rec__airbag_system__status_system_type__initial_velocity_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__velocity_range.velocity_range = a.rec__airbag_system__status_system_type__initial_velocity_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__initial_velocity_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__initial_velocity_measured__projection
  
  function [model_trace:.945] [name:Final_Velocity_Measured] 
    __split_fields_rec__airbag_system__status_system_type__final_velocity_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__velocity_range.velocity_range = a.rec__airbag_system__status_system_type__final_velocity_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__final_velocity_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__final_velocity_measured__projection
  
  function [name:Time_Difference_Measured] [model_trace:.949] 
    __split_fields_rec__airbag_system__status_system_type__time_difference_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__time_range.time_range = a.rec__airbag_system__status_system_type__time_difference_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__time_difference_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__time_difference_measured__projection
  
  function [model_trace:.953] [name:Acceleration_Measured] 
    __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__acceleration_range.acceleration_range = a.rec__airbag_system__status_system_type__acceleration_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  function [model_trace:.957] [name:Status_Airbag_System] 
    __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__status_airbag_system_type.status_airbag_system_type =
     a.rec__airbag_system__status_system_type__status_airbag_system
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function  
    rec__airbag_system__status_system_type__initial_velocity_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__initial_velocity_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__initial_velocity_measured) }
    returns Airbag_system__velocity_range.velocity_range
  
  function   airbag_system__status_system_type__final_velocity_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__final_velocity_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__final_velocity_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__final_velocity_measured) }
    returns Airbag_system__velocity_range.velocity_range
  
  function  
    airbag_system__status_system_type__time_difference_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function  
    rec__airbag_system__status_system_type__time_difference_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__time_difference_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__time_difference_measured) }
    returns Airbag_system__time_range.time_range
  
  function   airbag_system__status_system_type__acceleration_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__acceleration_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__acceleration_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__acceleration_measured) }
    returns Airbag_system__acceleration_range.acceleration_range
  
  function   airbag_system__status_system_type__status_airbag_system__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__status_airbag_system_
    (a : __rep) requires
    { (airbag_system__status_system_type__status_airbag_system__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__status_airbag_system) }
    returns
    Airbag_system__status_airbag_system_type.status_airbag_system_type
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Airbag_system__velocity_range__rep.to_rep
                a.__split_fields.rec__airbag_system__status_system_type__initial_velocity_measured)
               = (Airbag_system__velocity_range__rep.to_rep
                    b.__split_fields.rec__airbag_system__status_system_type__initial_velocity_measured))
              /\
              ((Airbag_system__velocity_range__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__final_velocity_measured)
                 = (Airbag_system__velocity_range__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__final_velocity_measured))
              /\
              ((Airbag_system__time_range__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__time_difference_measured)
                 = (Airbag_system__time_range__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__time_difference_measured))
              /\
              ((Airbag_system__acceleration_range__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__acceleration_measured)
                 = (Airbag_system__acceleration_range__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__acceleration_measured))
              /\
              ((Airbag_system__status_airbag_system_type__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__status_airbag_system)
                 = (Airbag_system__status_airbag_system_type__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__status_airbag_system)))
           then True  else False)

end

(* Module for axiomatizing type "status_system_type" defined at airbag_system.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_system_type
  
  use export Airbag_system__status_system_type__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type status_system_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__first__bit
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__last__bit
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__initial_velocity_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__initial_velocity_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__initial_velocity_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__initial_velocity_measured__last__bit )
     > (airbag_system__status_system_type__initial_velocity_measured__first__bit
          ))
  
  axiom airbag_system__status_system_type__initial_velocity_measured__position_axiom : 
  ((airbag_system__status_system_type__initial_velocity_measured__position )
     >= 0)
  
  function  
    airbag_system__status_system_type__final_velocity_measured__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__final_velocity_measured__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__final_velocity_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__final_velocity_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__final_velocity_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__final_velocity_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__final_velocity_measured__last__bit )
     > (airbag_system__status_system_type__final_velocity_measured__first__bit
          ))
  
  axiom airbag_system__status_system_type__final_velocity_measured__position_axiom : 
  ((airbag_system__status_system_type__final_velocity_measured__position )
     >= 0)
  
  function  
    airbag_system__status_system_type__time_difference_measured__first__bit
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__time_difference_measured__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__time_difference_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__time_difference_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__time_difference_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__time_difference_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__time_difference_measured__last__bit )
     > (airbag_system__status_system_type__time_difference_measured__first__bit
          ))
  
  axiom airbag_system__status_system_type__time_difference_measured__position_axiom : 
  ((airbag_system__status_system_type__time_difference_measured__position )
     >= 0)
  
  function  
    airbag_system__status_system_type__acceleration_measured__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__acceleration_measured__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__acceleration_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__acceleration_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__acceleration_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__last__bit )
     > (airbag_system__status_system_type__acceleration_measured__first__bit ))
  
  axiom airbag_system__status_system_type__acceleration_measured__position_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__position ) >= 0)
  
  function  
    airbag_system__status_system_type__status_airbag_system__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__status_airbag_system__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__status_airbag_system__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__status_airbag_system__first__bit_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__status_airbag_system__last__bit_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__last__bit )
     > (airbag_system__status_system_type__status_airbag_system__first__bit ))
  
  axiom airbag_system__status_system_type__status_airbag_system__position_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__position ) >= 0)
  
  function   user_eq (a : status_system_type b : status_system_type) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns status_system_type
  
  type status_system_type__ref  = { mutable status_system_type__content : status_system_type }
  
  function   status_system_type__ref_status_system_type__content__projection
    (a : status_system_type__ref) requires {  } ensures  {  } returns
    status_system_type = a.status_system_type__content
  
  meta model_projection function status_system_type__ref_status_system_type__content__projection
  
  meta inline:no function status_system_type__ref_status_system_type__content__projection
  
  function   status_system_type__havoc (x : status_system_type__ref) requires
    {  } ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "status_system" defined at airbag_system.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Airbag_system__status_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system_type
  
  val status_system__split_fields [name:Status_System] [model_projected]
  [model_trace:963] [sloc:airbag_system.ads:29]: Airbag_system__status_system_type.__split_fields

end

(* Module giving axioms for type "status_system_type" defined at airbag_system.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__status_system_type___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system_type
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_215) : Airbag_system__status_system_type.status_system_type
    ([mlw:proxy_symbol] [introduced] temp___is_init_211) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_212) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_213) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_214) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_216) : Airbag_system__status_system_type.status_system_type
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_217) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for possibly declaring a logic function for "is_safe" defined at airbag_system.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Airbag_system__is_safe
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system_type
  
  function   is_safe
    (status : Airbag_system__status_system_type.status_system_type) requires
    { True } ensures  { True } returns bool
  
  function   is_safe__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : bool
    status : Airbag_system__status_system_type.status_system_type) requires
    { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "is_safe" defined at airbag_system.ads:44, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Airbag_system__is_safe___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__status_system_type
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__is_safe
  use        Airbag_system__acceleration_range
  use        Airbag_system__acceleration_range__rep
  use        Airbag_system__status_airbag_system_type
  use        Airbag_system__status_airbag_system_type__rep
  
  function   is_safe
    (status : Airbag_system__status_system_type.status_system_type) requires
    { True } ensures 
    { ((result = (Airbag_system__is_safe.is_safe status)) /\
         (Airbag_system__is_safe.is_safe__function_guard result status) /\
         (result
            = (if
              ((Airbag_system__acceleration_range__rep.to_rep
                  ( status).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__acceleration_measured)
                 < -35303)
              then
              ((Airbag_system__status_airbag_system_type__rep.to_rep
                  ( status).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__status_airbag_system)
                 = 0)
               else
              ((Airbag_system__status_airbag_system_type__rep.to_rep
                  ( status).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__status_airbag_system)
                 = 1)))) } returns bool
  
  axiom is_safe__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom is_safe__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module declaring the external object "ada___spark__text_io__standard_output," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___spark__text_io__standard_output
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_output  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___spark__text_io__standard_input," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___spark__text_io__standard_input
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_input  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at airbag_system.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airbag_system__init___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system
  use        Airbag_system__status_system_type
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__is_safe
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  
  function   init (__void_param : unit) requires { True } ensures 
    { (([GP_Pretty_Ada:19989] ((epsilon ([mlw:proxy_symbol]
                               [introduced] temp___result_223) : bool {
                               ((([mlw:proxy_symbol]
                                   [introduced] temp___result_223)
                                   = (Airbag_system__is_safe.is_safe
                                        ( --pp_record_aggregate NOT IMPLEMENTED)))
                                  /\
                                  (Airbag_system__is_safe.is_safe__function_guard
                                     ([mlw:proxy_symbol]
                                     [introduced] temp___result_223)
                                     ( --pp_record_aggregate NOT IMPLEMENTED)))})
                                 = True)) /\
         (Airbag_system__status_system_type___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "read_acceleration" defined at airbag_system.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airbag_system__read_acceleration___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system
  use        Airbag_system__status_system_type
  use        Airbag_system__status_system_type___axiom
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  
  function   read_acceleration (__void_param : unit) requires { True }
    ensures 
    { (Airbag_system__status_system_type___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "monitor_airbag_system" defined at airbag_system.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airbag_system__monitor_airbag_system___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system
  use        Airbag_system__status_system_type
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__is_safe
  
  function   monitor_airbag_system (__void_param : unit) requires { True }
    ensures 
    { (([GP_Pretty_Ada:19953] ((epsilon ([mlw:proxy_symbol]
                               [introduced] temp___result_224) : bool {
                               ((([mlw:proxy_symbol]
                                   [introduced] temp___result_224)
                                   = (Airbag_system__is_safe.is_safe
                                        ( --pp_record_aggregate NOT IMPLEMENTED)))
                                  /\
                                  (Airbag_system__is_safe.is_safe__function_guard
                                     ([mlw:proxy_symbol]
                                     [introduced] temp___result_224)
                                     ( --pp_record_aggregate NOT IMPLEMENTED)))})
                                 = True)) /\
         (Airbag_system__status_system_type___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "print_status" defined at airbag_system.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airbag_system__print_status___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_output
  
  function   print_status (__void_param : unit) requires { True } ensures 
    { True } returns unit

end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:8, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "acceleration_range" defined at airbag_system.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__acceleration_range___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__acceleration_range
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_201) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_197) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_198) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_199) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_200) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_197) = True) \/
          (Airbag_system__acceleration_range.first
             <= Airbag_system__acceleration_range.last))
       then
       (Airbag_system__acceleration_range.dynamic_property
          Airbag_system__acceleration_range.first
          Airbag_system__acceleration_range.last ([mlw:proxy_symbol]
          [introduced] temp___expr_201))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_202) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_203) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "velocity_range" defined at airbag_system.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__velocity_range___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__velocity_range
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_187) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_183) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_184) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_185) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_186) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_183) = True) \/
          (Airbag_system__velocity_range.first
             <= Airbag_system__velocity_range.last))
       then
       (Airbag_system__velocity_range.dynamic_property
          Airbag_system__velocity_range.first
          Airbag_system__velocity_range.last ([mlw:proxy_symbol]
          [introduced] temp___expr_187))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_188) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_189) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "time_range" defined at airbag_system.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__time_range___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__time_range
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_194) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_190) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_193) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_190) = True) \/
          (Airbag_system__time_range.first <= Airbag_system__time_range.last))
       then
       (Airbag_system__time_range.dynamic_property
          Airbag_system__time_range.first Airbag_system__time_range.last
          ([mlw:proxy_symbol] [introduced] temp___expr_194))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_195) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_196) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "status_airbag_system_type" defined at airbag_system.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__status_airbag_system_type___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__status_airbag_system_type
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_208) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_204) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_206) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_207) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_204) = True) \/
          (Airbag_system__status_airbag_system_type.first
             <= Airbag_system__status_airbag_system_type.last))
       then
       (Airbag_system__status_airbag_system_type.dynamic_property
          Airbag_system__status_airbag_system_type.first
          Airbag_system__status_airbag_system_type.last ([mlw:proxy_symbol]
          [introduced] temp___expr_208))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_209) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_210) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "status_system" defined at airbag_system.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__status_system___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system
  use        Airbag_system__status_system_type
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__is_safe
  use        Airbag_system__is_safe___axiom
  use        Airbag_system__init___axiom
  use        Airbag_system__read_acceleration___axiom
  use        Airbag_system__monitor_airbag_system___axiom
  use        Airbag_system__print_status___axiom
  use        Main__L_1
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  use        Main__L_1___axiom
  use        Airbag_system__acceleration_range___axiom
  use        Airbag_system__velocity_range___axiom
  use        Airbag_system__time_range___axiom
  use        Airbag_system__status_airbag_system_type___axiom
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__status_system___axiom
  use        Airbag_system__read_acceleration___axiom
  use        Airbag_system__print_status___axiom
  use        Airbag_system__is_safe___axiom
  use        Airbag_system__monitor_airbag_system___axiom
  use        Airbag_system__init___axiom
  
  function [GP_Subp:main.ads:3] [sloc:main.ads:3] def (__void_param : unit)
    requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram main.ads:3 *);
        assume
        { (Airbag_system__status_system_type___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED False False True True) };
        (* Assume moved pointers in outputs of the subprogram main.ads:3 *);
        (* Check for RTE in the Pre of the subprogram main.ads:3 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram main.ads:3 *);
        (try
        ();
          ([sloc:main.adb:8] ());
          ();
          ([GP_Sloc:main.adb:7:4] ([sloc:main.adb:7] ()));
          ([GP_Sloc:main.adb:7:4] ([sloc:main.adb:7] ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                  post {} return unit);
          (Airbag_system__init___axiom.init ());
          ()));
        ([GP_Sloc:main.adb:8:4] ([sloc:main.adb:8] (* Translation of an Ada loop from main.adb:8 *);
                                (if True then
                                (try
                                (let temp___loop_entry_225 =
                                  --pp_record_aggregate NOT IMPLEMENTED in
                                  (* While loop translating the Ada loop from main.adb:8 *);
                                  ([sloc:main.adb:9] loop
                                                       ();
                                                       ([GP_Sloc:main.adb:9:30] 
                                                       ([sloc:main.adb:9] ()));
                                                       (* Check for absence of RTE in the loop invariant and variant *);
                                                       (let ([mlw:proxy_symbol]
                                                       [introduced] temp___inv_226)
                                                       =
                                                       (Airbag_system__is_safe___axiom.is_safe
                                                          ( --pp_record_aggregate NOT IMPLEMENTED))
                                                       in abstract ensures
                                                       { True } begin 
                                                        (let _ = () in ())  end)
                                                       invariant
                                                       {([sloc:main.adb:9] 
                                                        ([GP_Reason:VC_LOOP_INVARIANT]
                                                        [GP_Sloc:main.adb:9:30]
                                                        [comment:      pragma Loop_Invariant (Is_Safe (Status_System));                              ^ main.adb:9:30:VC_LOOP_INVARIANT]
                                                        [vc:annotation]
                                                        [GP_Id:0]
                                                        [GP_Shape:L_1_loop__pragargs__call_is_safe] 
                                                        ([GP_Sloc:main.adb:9:30]
                                                        [GP_Pretty_Ada:840] (
                                                        (epsilon ([mlw:proxy_symbol]
                                                        [introduced] temp___result_227) : bool {
                                                        ((([mlw:proxy_symbol]
                                                            [introduced] temp___result_227)
                                                            = (Airbag_system__is_safe.is_safe
                                                                 ( --pp_record_aggregate NOT IMPLEMENTED)))
                                                           /\
                                                           (Airbag_system__is_safe.is_safe__function_guard
                                                              ([mlw:proxy_symbol]
                                                              [introduced] temp___result_227)
                                                              ( --pp_record_aggregate NOT IMPLEMENTED)))})
                                                          = True))))}
                                                       
                                                       (* Assume implicit invariants from the loop main.adb:8 *);
                                                       assume
                                                       { (True /\
                                                            (Airbag_system__status_system_type___axiom.dynamic_invariant
                                                               --pp_record_aggregate NOT IMPLEMENTED
                                                               False True
                                                               True True) /\
                                                            True /\ True) };
                                                       (* Continuation of loop after loop invariant and variant *);
                                                       ();
                                                       ([GP_Sloc:main.adb:10:7] 
                                                       ([sloc:main.adb:10] ()));
                                                       ([GP_Sloc:main.adb:10:7] 
                                                       ([sloc:main.adb:10] (
                                                        any
                                                         --pp_effects NOT IMPLEMENTED
                                                         pre {}
                                                       post {} return unit);
                                                       (Airbag_system__read_acceleration___axiom.read_acceleration
                                                          ());
                                                       ()));
                                  ([GP_Sloc:main.adb:11:7] ([sloc:main.adb:11] ()));
                                  ([GP_Sloc:main.adb:11:7] ([sloc:main.adb:11] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                                  (Airbag_system__monitor_airbag_system___axiom.monitor_airbag_system
                                     ());
                                  ()));
                                  ([GP_Sloc:main.adb:12:7] ([sloc:main.adb:12] ()));
                                  ([GP_Sloc:main.adb:12:7] ([sloc:main.adb:12] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                                  (Airbag_system__print_status___axiom.print_status
                                     ());
                                  ()));
                                (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:8 *);
                                (if False then raise Main__L_1.L_1 )
                                 end loop)) with
        | Main__L_1.L_1  -> ()) )));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = True in ())  end

end
