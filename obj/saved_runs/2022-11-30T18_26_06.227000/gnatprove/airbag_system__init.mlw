module Airbag_system__acceleration_range
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type acceleration_range = <range -300000 300000>
  
  val function first : int
    ensures { result = ((- 300000) : int) }
  
  val function last : int
    ensures { result = (300000 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = acceleration_range,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type acceleration_range__ref = {
                                mutable acceleration_range__content :
                                  acceleration_range
                                }
  
  function acceleration_range__ref_acceleration_range__content__projection (a: acceleration_range__ref) : acceleration_range =
    a.acceleration_range__content
  
  meta "model_projection" function acceleration_range__ref_acceleration_range__content__projection
  
  meta "inline:no" function acceleration_range__ref_acceleration_range__content__projection
  
  val acceleration_range__havoc (x: acceleration_range__ref) : unit
    writes { x }
end

module Airbag_system__acceleration_range__rep
  use Airbag_system__acceleration_range as Airbag_system__acceleration_range
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Airbag_system__acceleration_range.acceleration_range) : int =
    Airbag_system__acceleration_range.acceleration_range'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Airbag_system__acceleration_range.acceleration_range,
    predicate in_range = Airbag_system__acceleration_range.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Airbag_system__status_airbag_system_type
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type status_airbag_system_type
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = status_airbag_system_type,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type status_airbag_system_type__ref = {
                                       mutable status_airbag_system_type__content :
                                         status_airbag_system_type
                                       }
  
  function status_airbag_system_type__ref_status_airbag_system_type__content__projection (a: status_airbag_system_type__ref) : status_airbag_system_type =
    a.status_airbag_system_type__content
  
  meta "model_projection" function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  meta "inline:no" function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  val status_airbag_system_type__havoc (x: status_airbag_system_type__ref) : 
    unit
    writes { x }
end

module Airbag_system__status_airbag_system_type__rep
  use Airbag_system__status_airbag_system_type as Airbag_system__status_airbag_system_type
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Airbag_system__status_airbag_system_type.status_airbag_system_type,
    predicate in_range = Airbag_system__status_airbag_system_type.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Airbag_system__status_system_type__rep
  use _gnatprove_standard.Main
  use int.Int
  use Airbag_system__acceleration_range as Airbag_system__acceleration_range
  use Airbag_system__acceleration_range__rep as Airbag_system__acceleration_range__rep
  use Airbag_system__status_airbag_system_type as Airbag_system__status_airbag_system_type
  use Airbag_system__status_airbag_system_type__rep as Airbag_system__status_airbag_system_type__rep
  
  type __split_fields = {
                       rec__airbag_system__status_system_type__acceleration_measured :
                         Airbag_system__acceleration_range.acceleration_range;
                       rec__airbag_system__status_system_type__status_airbag_system :
                         Airbag_system__status_airbag_system_type.status_airbag_system_type
                       }
  
  function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection (a: __split_fields) : 
    Airbag_system__acceleration_range.acceleration_range =
    a.rec__airbag_system__status_system_type__acceleration_measured
  
  meta "model_projection" function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  meta "inline:no" function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection (a: __split_fields) : 
    Airbag_system__status_airbag_system_type.status_airbag_system_type =
    a.rec__airbag_system__status_system_type__status_airbag_system
  
  meta "model_projection" function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  meta "inline:no" function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate airbag_system__status_system_type__acceleration_measured__pred (a: __rep) =
    true
  
  val airbag_system__status_system_type__acceleration_measured__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (airbag_system__status_system_type__acceleration_measured__pred
                   (a : __rep)) }
  
  val rec__airbag_system__status_system_type__acceleration_measured_ (a: __rep) : 
    Airbag_system__acceleration_range.acceleration_range
    requires { airbag_system__status_system_type__acceleration_measured__pred
                 a
    }
    ensures { (result
                 = ((__split_fields a).rec__airbag_system__status_system_type__acceleration_measured)) }
  
  predicate airbag_system__status_system_type__status_airbag_system__pred (a: __rep) =
    true
  
  val airbag_system__status_system_type__status_airbag_system__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (airbag_system__status_system_type__status_airbag_system__pred
                   (a : __rep)) }
  
  val rec__airbag_system__status_system_type__status_airbag_system_ (a: __rep) : 
    Airbag_system__status_airbag_system_type.status_airbag_system_type
    requires { airbag_system__status_system_type__status_airbag_system__pred
                 a
    }
    ensures { (result
                 = ((__split_fields a).rec__airbag_system__status_system_type__status_airbag_system)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Airbag_system__acceleration_range__rep.to_rep
            ((__split_fields a).rec__airbag_system__status_system_type__acceleration_measured))
           = (Airbag_system__acceleration_range__rep.to_rep
                ((__split_fields b).rec__airbag_system__status_system_type__acceleration_measured))) /\
          ((Airbag_system__status_airbag_system_type__rep.to_rep
              ((__split_fields a).rec__airbag_system__status_system_type__status_airbag_system))
             = (Airbag_system__status_airbag_system_type__rep.to_rep
                  ((__split_fields b).rec__airbag_system__status_system_type__status_airbag_system)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Airbag_system__status_system_type
  use export Airbag_system__status_system_type__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type status_system_type = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function airbag_system__status_system_type__acceleration_measured__first__bit : 
    int
  
  val function airbag_system__status_system_type__acceleration_measured__last__bit : 
    int
  
  val function airbag_system__status_system_type__acceleration_measured__position : 
    int
  
  axiom airbag_system__status_system_type__acceleration_measured__first__bit_axiom:
    (airbag_system__status_system_type__acceleration_measured__first__bit
       >= (0 : int))
  
  axiom airbag_system__status_system_type__acceleration_measured__last__bit_axiom:
    (airbag_system__status_system_type__acceleration_measured__last__bit
       > airbag_system__status_system_type__acceleration_measured__first__bit)
  
  axiom airbag_system__status_system_type__acceleration_measured__position_axiom:
    (airbag_system__status_system_type__acceleration_measured__position
       >= (0 : int))
  
  val function airbag_system__status_system_type__status_airbag_system__first__bit : 
    int
  
  val function airbag_system__status_system_type__status_airbag_system__last__bit : 
    int
  
  val function airbag_system__status_system_type__status_airbag_system__position : 
    int
  
  axiom airbag_system__status_system_type__status_airbag_system__first__bit_axiom:
    (airbag_system__status_system_type__status_airbag_system__first__bit
       >= (0 : int))
  
  axiom airbag_system__status_system_type__status_airbag_system__last__bit_axiom:
    (airbag_system__status_system_type__status_airbag_system__last__bit
       > airbag_system__status_system_type__status_airbag_system__first__bit)
  
  axiom airbag_system__status_system_type__status_airbag_system__position_axiom:
    (airbag_system__status_system_type__status_airbag_system__position
       >= (0 : int))
  
  val function user_eq (a: status_system_type) (b: status_system_type) : 
    bool
  
  val function dummy : status_system_type
  
  type status_system_type__ref = {
                                mutable status_system_type__content :
                                  status_system_type
                                }
  
  function status_system_type__ref_status_system_type__content__projection (a: status_system_type__ref) : status_system_type =
    a.status_system_type__content
  
  meta "model_projection" function status_system_type__ref_status_system_type__content__projection
  
  meta "inline:no" function status_system_type__ref_status_system_type__content__projection
  
  val status_system_type__havoc (x: status_system_type__ref) : unit
    writes { x }
end

module Airbag_system__status_system
  use _gnatprove_standard.Main
  use int.Int
  use Airbag_system__status_system_type as Airbag_system__status_system_type
  
  val status_system__split_fields : Airbag_system__status_system_type.__split_fields__ref
end

module Airbag_system__status_system_type___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Airbag_system__status_system_type as Airbag_system__status_system_type
  
  predicate dynamic_invariant (temp___expr_181: Airbag_system__status_system_type.status_system_type) (temp___is_init_177: bool) (temp___skip_constant_178: bool) (temp___do_toplevel_179: bool) (temp___do_typ_inv_180: bool) =
    true
  
  val dynamic_invariant (temp___expr_181: Airbag_system__status_system_type.status_system_type) (temp___is_init_177: bool) (temp___skip_constant_178: bool) (temp___do_toplevel_179: bool) (temp___do_typ_inv_180: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_181 :
                          Airbag_system__status_system_type.status_system_type))
                      (temp___is_init_177 : bool))
                     (temp___skip_constant_178 : bool))
                    (temp___do_toplevel_179 : bool))
                   (temp___do_typ_inv_180 : bool)) }
  
  predicate default_initial_assumption (temp___expr_182: Airbag_system__status_system_type.status_system_type) (temp___skip_top_level_183: bool) =
    true
  
  val default_initial_assumption (temp___expr_182: Airbag_system__status_system_type.status_system_type) (temp___skip_top_level_183: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_182 :
                       Airbag_system__status_system_type.status_system_type))
                   (temp___skip_top_level_183 : bool)) }
end

module Airbag_system__is_safe
  use _gnatprove_standard.Main
  use int.Int
  use Airbag_system__status_system_type as Airbag_system__status_system_type
  
  val function is_safe (status: Airbag_system__status_system_type.status_system_type) : 
    bool
  
  val predicate is_safe__function_guard (temp___result_162: bool) (status: 
    Airbag_system__status_system_type.status_system_type)
end

module Airbag_system__is_safe___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Airbag_system__status_system_type as Airbag_system__status_system_type
  use Airbag_system__status_system_type___axiom as Airbag_system__status_system_type___axiom
  use Airbag_system__is_safe as Airbag_system__is_safe
  use Airbag_system__acceleration_range as Airbag_system__acceleration_range
  use Airbag_system__acceleration_range__rep as Airbag_system__acceleration_range__rep
  use Airbag_system__status_airbag_system_type as Airbag_system__status_airbag_system_type
  use Airbag_system__status_airbag_system_type__rep as Airbag_system__status_airbag_system_type__rep
  
  val is_safe (status: Airbag_system__status_system_type.status_system_type) : 
    bool
    requires { true }
    ensures { (((result = (Airbag_system__is_safe.is_safe status)) /\
                  ((Airbag_system__is_safe.is_safe__function_guard result)
                     status)) /\
                 (result
                    = (if ((Airbag_system__acceleration_range__rep.to_rep
                              ((Airbag_system__status_system_type.__split_fields
                                   status).Airbag_system__status_system_type.rec__airbag_system__status_system_type__acceleration_measured))
                             < ((- 35303) : int)) then
                         ((Airbag_system__status_airbag_system_type__rep.to_rep
                             ((Airbag_system__status_system_type.__split_fields
                                  status).Airbag_system__status_system_type.rec__airbag_system__status_system_type__status_airbag_system))
                            = (0 : int))
                       else
                         ((Airbag_system__status_airbag_system_type__rep.to_rep
                             ((Airbag_system__status_system_type.__split_fields
                                  status).Airbag_system__status_system_type.rec__airbag_system__status_system_type__status_airbag_system))
                            = (1 : int))))) }
  
  axiom is_safe__post_axiom:
    forall status : Airbag_system__status_system_type.status_system_type
          [Airbag_system__is_safe.is_safe status].
      ((((((Airbag_system__status_system_type___axiom.dynamic_invariant
              status)
             True)
            True)
           True)
          True) ->
         (let result = Airbag_system__is_safe.is_safe status in
          if ((Airbag_system__is_safe.is_safe__function_guard result) status) then
            ((true /\ true) /\ true)
          else true))
  
  axiom is_safe__def_axiom:
    forall status : Airbag_system__status_system_type.status_system_type
          [Airbag_system__is_safe.is_safe status].
      ((Airbag_system__is_safe.is_safe status)
         = (if ((Airbag_system__acceleration_range__rep.to_rep
                   ((Airbag_system__status_system_type.__split_fields status).
                      Airbag_system__status_system_type.rec__airbag_system__status_system_type__acceleration_measured))
                  < ((- 35303) : int)) then
              ((Airbag_system__status_airbag_system_type__rep.to_rep
                  ((Airbag_system__status_system_type.__split_fields status).
                     Airbag_system__status_system_type.rec__airbag_system__status_system_type__status_airbag_system))
                 = (0 : int))
            else
              ((Airbag_system__status_airbag_system_type__rep.to_rep
                  ((Airbag_system__status_system_type.__split_fields status).
                     Airbag_system__status_system_type.rec__airbag_system__status_system_type__status_airbag_system))
                 = (1 : int))))
end

module Ada___spark__text_io__standard_input
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_input : Main.__private__ref
end

module As_io_wrapper__as_init_standard_input___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Ada___spark__text_io__standard_input as Ada___spark__text_io__standard_input
  
  val as_init_standard_input (__void_param: unit) : unit
    requires { true }
    writes { Ada___spark__text_io__standard_input.standard_input }
    ensures { true }
end

module Ada___spark__text_io__standard_output
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_output : Main.__private__ref
end

module As_io_wrapper__as_init_standard_output___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Ada___spark__text_io__standard_output as Ada___spark__text_io__standard_output
  
  val as_init_standard_output (__void_param: unit) : unit
    requires { true }
    writes { Ada___spark__text_io__standard_output.standard_output }
    ensures { true }
end

module Airbag_system__acceleration_range___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Airbag_system__acceleration_range as Airbag_system__acceleration_range
  
  predicate dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) =
    if ((temp___is_init_163 = True) \/
          (Airbag_system__acceleration_range.first
             <= Airbag_system__acceleration_range.last)) then
      (((Airbag_system__acceleration_range.dynamic_property
           Airbag_system__acceleration_range.first)
          Airbag_system__acceleration_range.last)
         temp___expr_167)
    else true
  
  val dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_167 : int))
                      (temp___is_init_163 : bool))
                     (temp___skip_constant_164 : bool))
                    (temp___do_toplevel_165 : bool))
                   (temp___do_typ_inv_166 : bool)) }
  
  predicate default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) =
    true
  
  val default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_168 : int))
                   (temp___skip_top_level_169 : bool)) }
end

module Airbag_system__status_airbag_system_type___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Airbag_system__status_airbag_system_type as Airbag_system__status_airbag_system_type
  
  predicate dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) =
    if ((temp___is_init_170 = True) \/
          (Airbag_system__status_airbag_system_type.first
             <= Airbag_system__status_airbag_system_type.last)) then
      (((Airbag_system__status_airbag_system_type.dynamic_property
           Airbag_system__status_airbag_system_type.first)
          Airbag_system__status_airbag_system_type.last)
         temp___expr_174)
    else true
  
  val dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_174 : int))
                      (temp___is_init_170 : bool))
                     (temp___skip_constant_171 : bool))
                    (temp___do_toplevel_172 : bool))
                   (temp___do_typ_inv_173 : bool)) }
  
  predicate default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) =
    true
  
  val default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_175 : int))
                   (temp___skip_top_level_176 : bool)) }
end

module Airbag_system__status_system___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Airbag_system__init__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Airbag_system__status_system as Airbag_system__status_system
  use Airbag_system__status_system_type as Airbag_system__status_system_type
  use Airbag_system__status_system_type___axiom as Airbag_system__status_system_type___axiom
  use Airbag_system__is_safe as Airbag_system__is_safe
  use Airbag_system__is_safe___axiom as Airbag_system__is_safe___axiom
  use As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
  use As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom
  use Airbag_system__acceleration_range as Airbag_system__acceleration_range
  use Airbag_system__status_airbag_system_type as Airbag_system__status_airbag_system_type
  use Airbag_system__status_airbag_system_type__rep as Airbag_system__status_airbag_system_type__rep
  use Ada___spark__text_io__standard_input as Ada___spark__text_io__standard_input
  use Ada___spark__text_io__standard_output as Ada___spark__text_io__standard_output
  use Airbag_system__acceleration_range___axiom as Airbag_system__acceleration_range___axiom
  use Airbag_system__status_airbag_system_type___axiom as Airbag_system__status_airbag_system_type___axiom
  use Airbag_system__status_system_type___axiom as Airbag_system__status_system_type___axiom
  use Airbag_system__status_system___axiom as Airbag_system__status_system___axiom
  use Airbag_system__is_safe___axiom as Airbag_system__is_safe___axiom
  use As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
  use As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom
  
  let def (__void_param : unit)
    requires { [#"airbag_system.ads" 46 0 0] true }
    ensures { [#"airbag_system.ads" 46 0 0]
              [#"airbag_system.ads" 49 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:airbag_system.ads:49:18]
              [@comment:      Post    => Is_Safe (Status_System);                  ^ airbag_system.ads:49:18:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Shape:pragargs__call_is_safe]
              [@GP_Id:2]
              [@GP_Sloc:airbag_system.ads:49:18]
              [@GP_Pretty_Ada:20515]
              ((epsilon temp___result_230: bool.
                  ((temp___result_230
                      = (Airbag_system__is_safe.is_safe
                           { Airbag_system__status_system_type.__split_fields =
                               (Airbag_system__status_system_type.__split_fields__content
                                   Airbag_system__status_system.status_system__split_fields) })) /\
                     ((Airbag_system__is_safe.is_safe__function_guard
                         temp___result_230)
                        { Airbag_system__status_system_type.__split_fields =
                            (Airbag_system__status_system_type.__split_fields__content
                                Airbag_system__status_system.status_system__split_fields) })))
                 = True) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram airbag_system.ads:46]
      ());
     assume {
       ((((Airbag_system__status_system_type___axiom.dynamic_invariant
             { Airbag_system__status_system_type.__split_fields =
                 (Airbag_system__status_system_type.__split_fields__content
                     Airbag_system__status_system.status_system__split_fields) })
            False)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram airbag_system.ads:46]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram airbag_system.ads:46]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram airbag_system.ads:46] ());
     (try
        ([@GP_Sloc:airbag_system.adb:55:7] [#"airbag_system.adb" 55 0 0] ());
        ([@GP_Sloc:airbag_system.adb:55:7]
         [#"airbag_system.adb" 55 0 0]
         (([#"airbag_system.adb" 55 0 0]
           (val _f : unit
              writes { Ada___spark__text_io__standard_input.standard_input } in
            _f));
          (As_io_wrapper__as_init_standard_input___axiom.as_init_standard_input
             ())));
        ([@GP_Sloc:airbag_system.adb:56:7] [#"airbag_system.adb" 56 0 0] ());
        ([@GP_Sloc:airbag_system.adb:56:7]
         [#"airbag_system.adb" 56 0 0]
         (([#"airbag_system.adb" 56 0 0]
           (val _f : unit
              writes { Ada___spark__text_io__standard_output.standard_output } in
            _f));
          (As_io_wrapper__as_init_standard_output___axiom.as_init_standard_output
             ())));
        ([@GP_Sloc:airbag_system.adb:57:7] [#"airbag_system.adb" 57 0 0] ());
        ([@GP_Sloc:airbag_system.adb:57:21]
         [#"airbag_system.adb" 57 0 0]
         (let temp___229 =
            { Airbag_system__status_system_type.__split_fields =
                { Airbag_system__status_system_type.rec__airbag_system__status_system_type__acceleration_measured =
                    (0 : Airbag_system__acceleration_range.acceleration_range) ;
                  Airbag_system__status_system_type.rec__airbag_system__status_system_type__status_airbag_system =
                    (Airbag_system__status_airbag_system_type__rep.of_rep
                       (1 : int)) } } in
          [#"airbag_system.adb" 57 0 0]
          (Airbag_system__status_system.status_system__split_fields.Airbag_system__status_system_type.__split_fields__content <-
             (Airbag_system__status_system_type.__split_fields temp___229))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            Airbag_system__is_safe___axiom.is_safe
              { Airbag_system__status_system_type.__split_fields =
                  (Airbag_system__status_system_type.__split_fields__content
                      Airbag_system__status_system.status_system__split_fields) } in
          () in
        ()
      end))
end
