(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "acceleration_range" defined at airbag_system.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__acceleration_range
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type acceleration_range  = <range -300000 300000>
  
  function   first () requires { True } ensures  { True } returns
    int = -300000
  
  function   last () requires { True } ensures  { True } returns int = 300000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = acceleration_range,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type acceleration_range__ref  = { mutable acceleration_range__content : acceleration_range }
  
  function   acceleration_range__ref_acceleration_range__content__projection
    (a : acceleration_range__ref) requires {  } ensures  {  } returns
    acceleration_range = a.acceleration_range__content
  
  meta model_projection function acceleration_range__ref_acceleration_range__content__projection
  
  meta inline:no function acceleration_range__ref_acceleration_range__content__projection
  
  function   acceleration_range__havoc (x : acceleration_range__ref) requires
    {  } ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "acceleration_range" defined at airbag_system.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__acceleration_range__rep
  
  use        Airbag_system__acceleration_range
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep
    (x : Airbag_system__acceleration_range.acceleration_range) requires
    { True } ensures  { True } returns
    int = (Airbag_system__acceleration_range.acceleration_range'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__acceleration_range.acceleration_range,
    predicate in_range = Airbag_system__acceleration_range.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "status_airbag_system_type" defined at airbag_system.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_airbag_system_type
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type status_airbag_system_type  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = status_airbag_system_type,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type status_airbag_system_type__ref  = { mutable status_airbag_system_type__content : status_airbag_system_type }
  
  function  
    status_airbag_system_type__ref_status_airbag_system_type__content__projection
    (a : status_airbag_system_type__ref) requires {  } ensures  {  } returns
    status_airbag_system_type = a.status_airbag_system_type__content
  
  meta model_projection function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  meta inline:no function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  function   status_airbag_system_type__havoc
    (x : status_airbag_system_type__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "status_airbag_system_type" defined at airbag_system.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_airbag_system_type__rep
  
  use        Airbag_system__status_airbag_system_type
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__status_airbag_system_type.status_airbag_system_type,
    predicate in_range = Airbag_system__status_airbag_system_type.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "status_system_type" defined at airbag_system.ads:16, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Airbag_system__status_system_type__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__acceleration_range
  use        Airbag_system__acceleration_range__rep
  use        Airbag_system__status_airbag_system_type
  use        Airbag_system__status_airbag_system_type__rep
  
  type __split_fields  = { [model_trace:.1023]
                           [name:Acceleration_Measured]rec__airbag_system__status_system_type__acceleration_measured : Airbag_system__acceleration_range.acceleration_range;
                           [model_trace:.1028]
                           [name:Status_Airbag_System]rec__airbag_system__status_system_type__status_airbag_system : Airbag_system__status_airbag_system_type.status_airbag_system_type }
  
  function [model_trace:.1023] [name:Acceleration_Measured] 
    __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__acceleration_range.acceleration_range = a.rec__airbag_system__status_system_type__acceleration_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  function [model_trace:.1028] [name:Status_Airbag_System] 
    __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__status_airbag_system_type.status_airbag_system_type =
     a.rec__airbag_system__status_system_type__status_airbag_system
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   airbag_system__status_system_type__acceleration_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__acceleration_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__acceleration_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__acceleration_measured) }
    returns Airbag_system__acceleration_range.acceleration_range
  
  function   airbag_system__status_system_type__status_airbag_system__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__status_airbag_system_
    (a : __rep) requires
    { (airbag_system__status_system_type__status_airbag_system__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__status_airbag_system) }
    returns
    Airbag_system__status_airbag_system_type.status_airbag_system_type
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Airbag_system__acceleration_range__rep.to_rep
                a.__split_fields.rec__airbag_system__status_system_type__acceleration_measured)
               = (Airbag_system__acceleration_range__rep.to_rep
                    b.__split_fields.rec__airbag_system__status_system_type__acceleration_measured))
              /\
              ((Airbag_system__status_airbag_system_type__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__status_airbag_system)
                 = (Airbag_system__status_airbag_system_type__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__status_airbag_system)))
           then True  else False)

end

(* Module for axiomatizing type "status_system_type" defined at airbag_system.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_system_type
  
  use export Airbag_system__status_system_type__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type status_system_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function  
    airbag_system__status_system_type__acceleration_measured__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__acceleration_measured__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__acceleration_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__acceleration_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__acceleration_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__last__bit )
     > (airbag_system__status_system_type__acceleration_measured__first__bit ))
  
  axiom airbag_system__status_system_type__acceleration_measured__position_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__position ) >= 0)
  
  function  
    airbag_system__status_system_type__status_airbag_system__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__status_airbag_system__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__status_airbag_system__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__status_airbag_system__first__bit_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__status_airbag_system__last__bit_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__last__bit )
     > (airbag_system__status_system_type__status_airbag_system__first__bit ))
  
  axiom airbag_system__status_system_type__status_airbag_system__position_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__position ) >= 0)
  
  function   user_eq (a : status_system_type b : status_system_type) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns status_system_type
  
  type status_system_type__ref  = { mutable status_system_type__content : status_system_type }
  
  function   status_system_type__ref_status_system_type__content__projection
    (a : status_system_type__ref) requires {  } ensures  {  } returns
    status_system_type = a.status_system_type__content
  
  meta model_projection function status_system_type__ref_status_system_type__content__projection
  
  meta inline:no function status_system_type__ref_status_system_type__content__projection
  
  function   status_system_type__havoc (x : status_system_type__ref) requires
    {  } ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "status_system" defined at airbag_system.ads:21, created in Gnat2Why.Decls.Translate_Variable *)
module Airbag_system__status_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system_type
  
  val status_system__split_fields [name:Status_System] [model_trace:1034]
  [model_projected] [sloc:airbag_system.ads:21]: Airbag_system__status_system_type.__split_fields

end

(* Module giving axioms for type "status_system_type" defined at airbag_system.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__status_system_type___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system_type
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_181) : Airbag_system__status_system_type.status_system_type
    ([mlw:proxy_symbol] [introduced] temp___is_init_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_180) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_182) : Airbag_system__status_system_type.status_system_type
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_183) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "acceleration" defined at airbag_system.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Airbag_system__read_acceleration__acceleration
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val acceleration [name:Acceleration] [model_projected]
  [model_trace:833] [sloc:airbag_system.adb:10]: int

end

(* Module declaring the external object "ada___spark__text_io__standard_output," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___spark__text_io__standard_output
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_output  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "as_put_line" defined at as_io_wrapper.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put_line___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_output
  
  function   as_put_line (item : Standard__string.string__) requires { True }
    ensures  { True } returns unit

end

(* Module declaring the external object "ada___spark__text_io__standard_input," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___spark__text_io__standard_input
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_input  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "as_get" defined at as_io_wrapper.ads:109, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_get__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer___axiom
  use        Standard__string
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  
  function   as_get
    (item : int__ref
    prompt_try_again_when_not_integer : Standard__string.string__) requires
    { True } ensures 
    { (Standard__integer___axiom.dynamic_invariant !item True True True True) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "as_put" defined at as_io_wrapper.ads:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_output
  
  function   as_put (item : Standard__string.string__) requires { True }
    ensures  { True } returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "as_put" defined at as_io_wrapper.ads:117, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__3___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_output
  
  function   as_put (item : int) requires { True } ensures  { True } returns
    unit

end

(* Module for defining the loop exit exception for the loop "L_1" defined at airbag_system.adb:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Airbag_system__read_acceleration__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:12, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_196
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_196 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_196__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:14, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_199
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_199 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_199__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:16, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_201
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_201 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_201__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:18, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_203
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_203 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_203__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving an empty axiom for the entity "acceleration" defined at airbag_system.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__acceleration___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at airbag_system.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "acceleration_range" defined at airbag_system.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__acceleration_range___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__acceleration_range
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_166) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_163) = True) \/
          (Airbag_system__acceleration_range.first
             <= Airbag_system__acceleration_range.last))
       then
       (Airbag_system__acceleration_range.dynamic_property
          Airbag_system__acceleration_range.first
          Airbag_system__acceleration_range.last ([mlw:proxy_symbol]
          [introduced] temp___expr_167))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "status_airbag_system_type" defined at airbag_system.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__status_airbag_system_type___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__status_airbag_system_type
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_174) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_170) = True) \/
          (Airbag_system__status_airbag_system_type.first
             <= Airbag_system__status_airbag_system_type.last))
       then
       (Airbag_system__status_airbag_system_type.dynamic_property
          Airbag_system__status_airbag_system_type.first
          Airbag_system__status_airbag_system_type.last ([mlw:proxy_symbol]
          [introduced] temp___expr_174))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "status_system" defined at airbag_system.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__status_system___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "read_acceleration" defined at airbag_system.ads:23, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Airbag_system__read_acceleration__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer___axiom
  use        Standard__string
  use        Airbag_system__status_system
  use        Airbag_system__status_system_type
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__read_acceleration__acceleration
  use        As_io_wrapper__as_put_line___axiom
  use        As_io_wrapper__as_get__2___axiom
  use        As_io_wrapper__as_put__2___axiom
  use        As_io_wrapper__as_put__3___axiom
  use        Airbag_system__acceleration_range
  use        Airbag_system__acceleration_range__rep
  use        Airbag_system__read_acceleration__L_1
  use        Temp___String_Literal_196
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_199
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_201
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_203
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Airbag_system__read_acceleration__acceleration___axiom
  use        Airbag_system__read_acceleration__L_1___axiom
  use        Airbag_system__acceleration_range___axiom
  use        Airbag_system__status_airbag_system_type___axiom
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__status_system___axiom
  use        As_io_wrapper__as_put__2___axiom
  use        As_io_wrapper__as_put_line___axiom
  use        As_io_wrapper__as_get__2___axiom
  use        As_io_wrapper__as_put__3___axiom
  
  function [GP_Subp:airbag_system.ads:23] [sloc:airbag_system.ads:23] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram airbag_system.ads:23 *);
        assume
        { (Airbag_system__status_system_type___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram airbag_system.ads:23 *);
        (* Check for RTE in the Pre of the subprogram airbag_system.ads:23 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram airbag_system.ads:23 *);
        (try
        ();
          ([sloc:airbag_system.adb:10] assume
          { (Standard__integer___axiom.default_initial_assumption
               !Airbag_system__read_acceleration__acceleration.acceleration
               False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Airbag_system__read_acceleration__acceleration.acceleration
               False False True True) });
          ([sloc:airbag_system.adb:13] ());
          ();
          ([GP_Sloc:airbag_system.adb:12:7] ([sloc:airbag_system.adb:12] ()));
          ([GP_Sloc:airbag_system.adb:12:7] ([sloc:airbag_system.adb:12] (
                                             any --pp_effects NOT IMPLEMENTED
                                              pre {}
                                            post {} return unit);
          (As_io_wrapper__as_put_line___axiom.as_put_line
             (let ([mlw:proxy_symbol] [introduced] temp___197) =
             ( (Temp___String_Literal_196.temp___String_Literal_196 ())) in
             (Standard__string.of_array ([mlw:proxy_symbol]
                [introduced] temp___197) 1 61)));
          ()));
        ([GP_Sloc:airbag_system.adb:13:7] ([sloc:airbag_system.adb:13] 
                                          (* Translation of an Ada loop from airbag_system.adb:13 *);
                                          (if True then
                                          (try
                                          (* While loop translating the Ada loop from airbag_system.adb:13 *);
                                            ([sloc:airbag_system.adb:13] 
                                            loop
                                              (* Check for absence of RTE in the loop invariant and variant *)
                                              
                                              
                                              (* Assume implicit invariants from the loop airbag_system.adb:13 *);
                                              assume
                                              { (True /\
                                                   (Standard__integer___axiom.dynamic_invariant
                                                      !Airbag_system__read_acceleration__acceleration.acceleration
                                                      False True True True)
                                                   /\ True /\ True) };
                                              (* Continuation of loop after loop invariant and variant *);
                                              ();
                                              ([GP_Sloc:airbag_system.adb:14:17] 
                                              ([sloc:airbag_system.adb:14] ()));
                                              ([GP_Sloc:airbag_system.adb:14:10] 
                                              ([sloc:airbag_system.adb:14] ()));
                                              ([GP_Sloc:airbag_system.adb:14:10] 
                                              ([sloc:airbag_system.adb:14] (let ([mlw:proxy_symbol]
                                              [introduced] temp___compl_198)
                                              =
                                              !Airbag_system__read_acceleration__acceleration.acceleration
                                              in
                                              ( any
                                                 --pp_effects NOT IMPLEMENTED
                                                 pre {}
                                              post {} return unit);
                                              (As_io_wrapper__as_get__2___axiom.as_get
                                                 Airbag_system__read_acceleration__acceleration.acceleration
                                                 (let ([mlw:proxy_symbol]
                                                 [introduced] temp___200) =
                                                 ( (Temp___String_Literal_199.temp___String_Literal_199
                                                      ())) in
                                                 (Standard__string.of_array
                                                    ([mlw:proxy_symbol]
                                                    [introduced] temp___200)
                                                    1 25)));
                                              ())));
                                            ([GP_Sloc:airbag_system.adb:15:21] 
                                            ([sloc:airbag_system.adb:15] ()));
                                            ([GP_Sloc:airbag_system.adb:15:49] 
                                            ([sloc:airbag_system.adb:15] ()));
                                            ([GP_Sloc:airbag_system.adb:15:10] 
                                            ([sloc:airbag_system.adb:15] 
                                            (if
                                            (_gnatprove_standard.Boolean.andb
                                               (!Airbag_system__read_acceleration__acceleration.acceleration
                                                  > -300000)
                                               (!Airbag_system__read_acceleration__acceleration.acceleration
                                                  <= 300000))
                                            then
                                            raise Airbag_system__read_acceleration__L_1.L_1
                                            )));
                                            ([GP_Sloc:airbag_system.adb:16:10] 
                                            ([sloc:airbag_system.adb:16] ()));
                                            ([GP_Sloc:airbag_system.adb:16:10] 
                                            ([sloc:airbag_system.adb:16] (
                                             any --pp_effects NOT IMPLEMENTED
                                              pre {}
                                            post {} return unit);
                                            (As_io_wrapper__as_put__2___axiom.as_put
                                               (let ([mlw:proxy_symbol]
                                               [introduced] temp___202) =
                                               ( (Temp___String_Literal_201.temp___String_Literal_201
                                                    ())) in
                                               (Standard__string.of_array
                                                  ([mlw:proxy_symbol]
                                                  [introduced] temp___202) 1
                                                  37)));
                                            ()));
                                            ([GP_Sloc:airbag_system.adb:17:10] 
                                            ([sloc:airbag_system.adb:17] ()));
                                            ([GP_Sloc:airbag_system.adb:17:10] 
                                            ([sloc:airbag_system.adb:17] (
                                             any --pp_effects NOT IMPLEMENTED
                                              pre {}
                                            post {} return unit);
                                            (As_io_wrapper__as_put__3___axiom.as_put
                                               ( 300000));
                                            ()));
                                          ([GP_Sloc:airbag_system.adb:18:10] 
                                          ([sloc:airbag_system.adb:18] ()));
                                          ([GP_Sloc:airbag_system.adb:18:10] 
                                          ([sloc:airbag_system.adb:18] (
                                           any --pp_effects NOT IMPLEMENTED
                                            pre {}
                                          post {} return unit);
                                          (As_io_wrapper__as_put_line___axiom.as_put_line
                                             (let ([mlw:proxy_symbol]
                                             [introduced] temp___204) =
                                             ( (Temp___String_Literal_203.temp___String_Literal_203
                                                  ())) in
                                             (Standard__string.of_array
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___204) 1 0)));
                                          ()));
                                          (* Check for the exit condition and loop statements appearing before the loop invariant of loop airbag_system.adb:13 *);
                                          (if False then
                                          raise Airbag_system__read_acceleration__L_1.L_1
                                          )
                                           end loop) with
        | Airbag_system__read_acceleration__L_1.L_1  -> ()) )));
([GP_Sloc:airbag_system.adb:20:13] ([sloc:airbag_system.adb:20] ()));
([GP_Sloc:airbag_system.adb:20:71] ([sloc:airbag_system.adb:20] ()));
([GP_Sloc:airbag_system.adb:20:49] ([sloc:airbag_system.adb:20] (let ([mlw:proxy_symbol]
                                   [introduced] temp___207) =
                                   (let ([mlw:proxy_symbol]
                                     [introduced] temp___206) =
                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                     in abstract ensures
                                     { True } begin  (let _ =
                                                    ([mlw:proxy_symbol]
                                                      [introduced] temp___206).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__acceleration_measured
                                                    in ())  end;
                                     --pp_record_update NOT IMPLEMENTED)
                                   in (
                                   Airbag_system__status_system.status_system__split_fields
                                   :=
                                   ([mlw:proxy_symbol]
                                     [introduced] temp___207).Airbag_system__status_system_type.__split_fields))));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = True in ())  end

end
