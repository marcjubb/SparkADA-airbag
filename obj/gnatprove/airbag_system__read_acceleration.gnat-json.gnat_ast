(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "acceleration_range" defined at airbag_system.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__acceleration_range
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type acceleration_range  = <range -300000 300000>
  
  function   first () requires { True } ensures  { True } returns
    int = -300000
  
  function   last () requires { True } ensures  { True } returns int = 300000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = acceleration_range,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type acceleration_range__ref  = { mutable acceleration_range__content : acceleration_range }
  
  function   acceleration_range__ref_acceleration_range__content__projection
    (a : acceleration_range__ref) requires {  } ensures  {  } returns
    acceleration_range = a.acceleration_range__content
  
  meta model_projection function acceleration_range__ref_acceleration_range__content__projection
  
  meta inline:no function acceleration_range__ref_acceleration_range__content__projection
  
  function   acceleration_range__havoc (x : acceleration_range__ref) requires
    {  } ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "acceleration_range" defined at airbag_system.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__acceleration_range__rep
  
  use        Airbag_system__acceleration_range
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep
    (x : Airbag_system__acceleration_range.acceleration_range) requires
    { True } ensures  { True } returns
    int = (Airbag_system__acceleration_range.acceleration_range'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__acceleration_range.acceleration_range,
    predicate in_range = Airbag_system__acceleration_range.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "velocity_range" defined at airbag_system.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__velocity_range
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type velocity_range  = <range -300000 300000>
  
  function   first () requires { True } ensures  { True } returns
    int = -300000
  
  function   last () requires { True } ensures  { True } returns int = 300000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = velocity_range,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type velocity_range__ref  = { mutable velocity_range__content : velocity_range }
  
  function   velocity_range__ref_velocity_range__content__projection
    (a : velocity_range__ref) requires {  } ensures  {  } returns
    velocity_range = a.velocity_range__content
  
  meta model_projection function velocity_range__ref_velocity_range__content__projection
  
  meta inline:no function velocity_range__ref_velocity_range__content__projection
  
  function   velocity_range__havoc (x : velocity_range__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "velocity_range" defined at airbag_system.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__velocity_range__rep
  
  use        Airbag_system__velocity_range
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Airbag_system__velocity_range.velocity_range)
    requires { True } ensures  { True } returns
    int = (Airbag_system__velocity_range.velocity_range'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__velocity_range.velocity_range,
    predicate in_range = Airbag_system__velocity_range.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "time_range" defined at airbag_system.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__time_range
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type time_range  = <range 0 1000>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = time_range,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type time_range__ref  = { mutable time_range__content : time_range }
  
  function   time_range__ref_time_range__content__projection
    (a : time_range__ref) requires {  } ensures  {  } returns
    time_range = a.time_range__content
  
  meta model_projection function time_range__ref_time_range__content__projection
  
  meta inline:no function time_range__ref_time_range__content__projection
  
  function   time_range__havoc (x : time_range__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "time_range" defined at airbag_system.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__time_range__rep
  
  use        Airbag_system__time_range
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Airbag_system__time_range.time_range) requires
    { True } ensures  { True } returns
    int = (Airbag_system__time_range.time_range'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__time_range.time_range,
    predicate in_range = Airbag_system__time_range.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "status_airbag_system_type" defined at airbag_system.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_airbag_system_type
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type status_airbag_system_type  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = status_airbag_system_type,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type status_airbag_system_type__ref  = { mutable status_airbag_system_type__content : status_airbag_system_type }
  
  function  
    status_airbag_system_type__ref_status_airbag_system_type__content__projection
    (a : status_airbag_system_type__ref) requires {  } ensures  {  } returns
    status_airbag_system_type = a.status_airbag_system_type__content
  
  meta model_projection function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  meta inline:no function status_airbag_system_type__ref_status_airbag_system_type__content__projection
  
  function   status_airbag_system_type__havoc
    (x : status_airbag_system_type__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "status_airbag_system_type" defined at airbag_system.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_airbag_system_type__rep
  
  use        Airbag_system__status_airbag_system_type
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Airbag_system__status_airbag_system_type.status_airbag_system_type,
    predicate in_range = Airbag_system__status_airbag_system_type.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "status_system_type" defined at airbag_system.ads:21, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Airbag_system__status_system_type__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__acceleration_range
  use        Airbag_system__acceleration_range__rep
  use        Airbag_system__velocity_range
  use        Airbag_system__velocity_range__rep
  use        Airbag_system__time_range
  use        Airbag_system__time_range__rep
  use        Airbag_system__status_airbag_system_type
  use        Airbag_system__status_airbag_system_type__rep
  
  type __split_fields  = { [model_trace:.1155]
                           [name:Initial_Velocity_Measured]rec__airbag_system__status_system_type__initial_velocity_measured : Airbag_system__velocity_range.velocity_range;
                           [name:Final_Velocity_Measured]
                           [model_trace:.1160]rec__airbag_system__status_system_type__final_velocity_measured : Airbag_system__velocity_range.velocity_range;
                           [name:Time_Difference_Measured]
                           [model_trace:.1164]rec__airbag_system__status_system_type__time_difference_measured : Airbag_system__time_range.time_range;
                           [name:Acceleration_Measured]
                           [model_trace:.1168]rec__airbag_system__status_system_type__acceleration_measured : Airbag_system__acceleration_range.acceleration_range;
                           [model_trace:.1172]
                           [name:Status_Airbag_System]rec__airbag_system__status_system_type__status_airbag_system : Airbag_system__status_airbag_system_type.status_airbag_system_type }
  
  function [model_trace:.1155] [name:Initial_Velocity_Measured] 
    __split_fields_rec__airbag_system__status_system_type__initial_velocity_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__velocity_range.velocity_range = a.rec__airbag_system__status_system_type__initial_velocity_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__initial_velocity_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__initial_velocity_measured__projection
  
  function [name:Final_Velocity_Measured] [model_trace:.1160] 
    __split_fields_rec__airbag_system__status_system_type__final_velocity_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__velocity_range.velocity_range = a.rec__airbag_system__status_system_type__final_velocity_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__final_velocity_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__final_velocity_measured__projection
  
  function [name:Time_Difference_Measured] [model_trace:.1164] 
    __split_fields_rec__airbag_system__status_system_type__time_difference_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__time_range.time_range = a.rec__airbag_system__status_system_type__time_difference_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__time_difference_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__time_difference_measured__projection
  
  function [name:Acceleration_Measured] [model_trace:.1168] 
    __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__acceleration_range.acceleration_range = a.rec__airbag_system__status_system_type__acceleration_measured
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__acceleration_measured__projection
  
  function [model_trace:.1172] [name:Status_Airbag_System] 
    __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Airbag_system__status_airbag_system_type.status_airbag_system_type =
     a.rec__airbag_system__status_system_type__status_airbag_system
  
  meta model_projection function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  meta inline:no function __split_fields_rec__airbag_system__status_system_type__status_airbag_system__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function  
    rec__airbag_system__status_system_type__initial_velocity_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__initial_velocity_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__initial_velocity_measured) }
    returns Airbag_system__velocity_range.velocity_range
  
  function   airbag_system__status_system_type__final_velocity_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__final_velocity_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__final_velocity_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__final_velocity_measured) }
    returns Airbag_system__velocity_range.velocity_range
  
  function  
    airbag_system__status_system_type__time_difference_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function  
    rec__airbag_system__status_system_type__time_difference_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__time_difference_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__time_difference_measured) }
    returns Airbag_system__time_range.time_range
  
  function   airbag_system__status_system_type__acceleration_measured__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__acceleration_measured_
    (a : __rep) requires
    { (airbag_system__status_system_type__acceleration_measured__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__acceleration_measured) }
    returns Airbag_system__acceleration_range.acceleration_range
  
  function   airbag_system__status_system_type__status_airbag_system__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__airbag_system__status_system_type__status_airbag_system_
    (a : __rep) requires
    { (airbag_system__status_system_type__status_airbag_system__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__airbag_system__status_system_type__status_airbag_system) }
    returns
    Airbag_system__status_airbag_system_type.status_airbag_system_type
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Airbag_system__velocity_range__rep.to_rep
                a.__split_fields.rec__airbag_system__status_system_type__initial_velocity_measured)
               = (Airbag_system__velocity_range__rep.to_rep
                    b.__split_fields.rec__airbag_system__status_system_type__initial_velocity_measured))
              /\
              ((Airbag_system__velocity_range__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__final_velocity_measured)
                 = (Airbag_system__velocity_range__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__final_velocity_measured))
              /\
              ((Airbag_system__time_range__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__time_difference_measured)
                 = (Airbag_system__time_range__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__time_difference_measured))
              /\
              ((Airbag_system__acceleration_range__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__acceleration_measured)
                 = (Airbag_system__acceleration_range__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__acceleration_measured))
              /\
              ((Airbag_system__status_airbag_system_type__rep.to_rep
                  a.__split_fields.rec__airbag_system__status_system_type__status_airbag_system)
                 = (Airbag_system__status_airbag_system_type__rep.to_rep
                      b.__split_fields.rec__airbag_system__status_system_type__status_airbag_system)))
           then True  else False)

end

(* Module for axiomatizing type "status_system_type" defined at airbag_system.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Airbag_system__status_system_type
  
  use export Airbag_system__status_system_type__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type status_system_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__first__bit
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__last__bit
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__initial_velocity_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__initial_velocity_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__initial_velocity_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__initial_velocity_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__initial_velocity_measured__last__bit )
     > (airbag_system__status_system_type__initial_velocity_measured__first__bit
          ))
  
  axiom airbag_system__status_system_type__initial_velocity_measured__position_axiom : 
  ((airbag_system__status_system_type__initial_velocity_measured__position )
     >= 0)
  
  function  
    airbag_system__status_system_type__final_velocity_measured__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__final_velocity_measured__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__final_velocity_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__final_velocity_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__final_velocity_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__final_velocity_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__final_velocity_measured__last__bit )
     > (airbag_system__status_system_type__final_velocity_measured__first__bit
          ))
  
  axiom airbag_system__status_system_type__final_velocity_measured__position_axiom : 
  ((airbag_system__status_system_type__final_velocity_measured__position )
     >= 0)
  
  function  
    airbag_system__status_system_type__time_difference_measured__first__bit
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__time_difference_measured__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__time_difference_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__time_difference_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__time_difference_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__time_difference_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__time_difference_measured__last__bit )
     > (airbag_system__status_system_type__time_difference_measured__first__bit
          ))
  
  axiom airbag_system__status_system_type__time_difference_measured__position_axiom : 
  ((airbag_system__status_system_type__time_difference_measured__position )
     >= 0)
  
  function  
    airbag_system__status_system_type__acceleration_measured__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__acceleration_measured__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__acceleration_measured__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__acceleration_measured__first__bit_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__acceleration_measured__last__bit_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__last__bit )
     > (airbag_system__status_system_type__acceleration_measured__first__bit ))
  
  axiom airbag_system__status_system_type__acceleration_measured__position_axiom : 
  ((airbag_system__status_system_type__acceleration_measured__position ) >= 0)
  
  function  
    airbag_system__status_system_type__status_airbag_system__first__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__status_airbag_system__last__bit 
    () requires {  } ensures  {  } returns int
  
  function  
    airbag_system__status_system_type__status_airbag_system__position 
    () requires {  } ensures  {  } returns int
  
  axiom airbag_system__status_system_type__status_airbag_system__first__bit_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__first__bit )
     >= 0)
  
  axiom airbag_system__status_system_type__status_airbag_system__last__bit_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__last__bit )
     > (airbag_system__status_system_type__status_airbag_system__first__bit ))
  
  axiom airbag_system__status_system_type__status_airbag_system__position_axiom : 
  ((airbag_system__status_system_type__status_airbag_system__position ) >= 0)
  
  function   user_eq (a : status_system_type b : status_system_type) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns status_system_type
  
  type status_system_type__ref  = { mutable status_system_type__content : status_system_type }
  
  function   status_system_type__ref_status_system_type__content__projection
    (a : status_system_type__ref) requires {  } ensures  {  } returns
    status_system_type = a.status_system_type__content
  
  meta model_projection function status_system_type__ref_status_system_type__content__projection
  
  meta inline:no function status_system_type__ref_status_system_type__content__projection
  
  function   status_system_type__havoc (x : status_system_type__ref) requires
    {  } ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "status_system" defined at airbag_system.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Airbag_system__status_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system_type
  
  val status_system__split_fields [name:Status_System] [model_projected]
  [model_trace:1178] [sloc:airbag_system.ads:29]: Airbag_system__status_system_type.__split_fields

end

(* Module giving axioms for type "status_system_type" defined at airbag_system.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__status_system_type___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Airbag_system__status_system_type
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_196) : Airbag_system__status_system_type.status_system_type
    ([mlw:proxy_symbol] [introduced] temp___is_init_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_194) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_195) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_197) : Airbag_system__status_system_type.status_system_type
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_198) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for possibly declaring a logic function for "getgforce" defined at airbag_system.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Airbag_system__getgforce
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   getgforce (v0 : int v1 : int t : int) requires { True } ensures 
    { True } returns int
  
  function   getgforce__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_163) : int v0 : int
    v1 : int t : int) requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "getgforce" defined at airbag_system.ads:59, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Airbag_system__getgforce___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Int_Division
  use        Standard__integer___axiom
  use        Airbag_system__getgforce
  
  function   getgforce (v0 : int v1 : int t : int) requires
    { ((((([GP_Pretty_Ada:1340] (t > 0)) /\
            ([GP_Pretty_Ada:1343] (v0 > -150000))) /\
           ([GP_Pretty_Ada:1349] (v0 < 150000))) /\
          ([GP_Pretty_Ada:1352] (v1 > -150000))) /\
         ([GP_Pretty_Ada:1358] (v1 < 150000))) } ensures 
    { ((result = (Airbag_system__getgforce.getgforce v0 v1 t)) /\
         (Airbag_system__getgforce.getgforce__function_guard result v0 v1 t)
         /\
         ((Standard__integer___axiom.dynamic_invariant result True False True
             True) /\
            (result = ( (_gnatprove_standard.Int_Division.div (v1 - v0) t))))) }
    returns int
  
  axiom getgforce__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom getgforce__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "v0" defined at airbag_system.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Airbag_system__read_acceleration__v0
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val v0 [name:V0] [model_projected]
  [model_trace:833] [sloc:airbag_system.adb:10]: int

end

(* Module for defining a ref holding the value of variable "v1" defined at airbag_system.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Airbag_system__read_acceleration__v1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val v1 [name:V1] [model_projected]
  [model_trace:835] [sloc:airbag_system.adb:10]: int

end

(* Module for defining a ref holding the value of variable "t" defined at airbag_system.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Airbag_system__read_acceleration__t
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val t [model_projected] [name:T]
  [model_trace:836] [sloc:airbag_system.adb:10]: int

end

(* Module declaring the external object "ada___spark__text_io__standard_output," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___spark__text_io__standard_output
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_output  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "as_put_line" defined at as_io_wrapper.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put_line___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_output
  
  function   as_put_line (item : Standard__string.string__) requires { True }
    ensures  { True } returns unit

end

(* Module declaring the external object "ada___spark__text_io__standard_input," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___spark__text_io__standard_input
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_input  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "as_get" defined at as_io_wrapper.ads:109, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_get__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer___axiom
  use        Standard__string
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_input
  
  function   as_get
    (item : int__ref
    prompt_try_again_when_not_integer : Standard__string.string__) requires
    { True } ensures 
    { (Standard__integer___axiom.dynamic_invariant !item True True True True) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "as_put" defined at as_io_wrapper.ads:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_output
  
  function   as_put (item : Standard__string.string__) requires { True }
    ensures  { True } returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "as_put" defined at as_io_wrapper.ads:117, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__3___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Ada___spark__text_io__standard_output
  use        Ada___spark__text_io__standard_output
  
  function   as_put (item : int) requires { True } ensures  { True } returns
    unit

end

(* Module for defining the loop exit exception for the loop "L_1" defined at airbag_system.adb:14, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Airbag_system__read_acceleration__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for defining the loop exit exception for the loop "L_2" defined at airbag_system.adb:23, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Airbag_system__read_acceleration__L_2
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for defining the loop exit exception for the loop "L_3" defined at airbag_system.adb:32, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Airbag_system__read_acceleration__L_3
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:13, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_214
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_214 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_214__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:15, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_217
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_217 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_217__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:17, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_219
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_219 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_219__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:19, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_221
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_221 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_221__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:22, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_226
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_226 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_226__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:24, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_229
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_229 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_229__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:26, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_231
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_231 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_231__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:28, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_233
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_233 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_233__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:31, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_238
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_238 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_238__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:33, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_241
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_241 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_241__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:35, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_243
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_243 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_243__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at airbag_system.adb:37, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_245
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_245 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_245__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving an empty axiom for the entity "v0" defined at airbag_system.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__v0___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "v1" defined at airbag_system.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__v1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "t" defined at airbag_system.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__t___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at airbag_system.adb:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_2" defined at airbag_system.adb:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__L_2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_3" defined at airbag_system.adb:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__read_acceleration__L_3___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "acceleration_range" defined at airbag_system.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__acceleration_range___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__acceleration_range
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_166) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_167) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_164) = True) \/
          (Airbag_system__acceleration_range.first
             <= Airbag_system__acceleration_range.last))
       then
       (Airbag_system__acceleration_range.dynamic_property
          Airbag_system__acceleration_range.first
          Airbag_system__acceleration_range.last ([mlw:proxy_symbol]
          [introduced] temp___expr_168))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_169) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_170) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "velocity_range" defined at airbag_system.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__velocity_range___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__velocity_range
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_173) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_174) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_171) = True) \/
          (Airbag_system__velocity_range.first
             <= Airbag_system__velocity_range.last))
       then
       (Airbag_system__velocity_range.dynamic_property
          Airbag_system__velocity_range.first
          Airbag_system__velocity_range.last ([mlw:proxy_symbol]
          [introduced] temp___expr_175))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_176) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_177) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "time_range" defined at airbag_system.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__time_range___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__time_range
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_182) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_180) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_181) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_178) = True) \/
          (Airbag_system__time_range.first <= Airbag_system__time_range.last))
       then
       (Airbag_system__time_range.dynamic_property
          Airbag_system__time_range.first Airbag_system__time_range.last
          ([mlw:proxy_symbol] [introduced] temp___expr_182))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_183) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_184) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "status_airbag_system_type" defined at airbag_system.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Airbag_system__status_airbag_system_type___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Airbag_system__status_airbag_system_type
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_189) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_185) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_186) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_187) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_188) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_185) = True) \/
          (Airbag_system__status_airbag_system_type.first
             <= Airbag_system__status_airbag_system_type.last))
       then
       (Airbag_system__status_airbag_system_type.dynamic_property
          Airbag_system__status_airbag_system_type.first
          Airbag_system__status_airbag_system_type.last ([mlw:proxy_symbol]
          [introduced] temp___expr_189))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_190) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_191) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "status_system" defined at airbag_system.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airbag_system__status_system___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "read_acceleration" defined at airbag_system.ads:31, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Airbag_system__read_acceleration__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer___axiom
  use        Standard__string
  use        Airbag_system__status_system
  use        Airbag_system__status_system_type
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__getgforce___axiom
  use        Airbag_system__read_acceleration__v0
  use        Airbag_system__read_acceleration__v1
  use        Airbag_system__read_acceleration__t
  use        As_io_wrapper__as_put_line___axiom
  use        As_io_wrapper__as_get__2___axiom
  use        As_io_wrapper__as_put__2___axiom
  use        As_io_wrapper__as_put__3___axiom
  use        Airbag_system__acceleration_range
  use        Airbag_system__acceleration_range__rep
  use        Airbag_system__velocity_range
  use        Airbag_system__velocity_range__rep
  use        Airbag_system__time_range
  use        Airbag_system__time_range__rep
  use        Airbag_system__read_acceleration__L_1
  use        Airbag_system__read_acceleration__L_2
  use        Airbag_system__read_acceleration__L_3
  use        Temp___String_Literal_214
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_217
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_219
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_221
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_226
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_229
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_231
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_233
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_238
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_241
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_243
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_245
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Airbag_system__read_acceleration__v0___axiom
  use        Airbag_system__read_acceleration__v1___axiom
  use        Airbag_system__read_acceleration__t___axiom
  use        Airbag_system__read_acceleration__L_1___axiom
  use        Airbag_system__read_acceleration__L_2___axiom
  use        Airbag_system__read_acceleration__L_3___axiom
  use        Airbag_system__acceleration_range___axiom
  use        Airbag_system__velocity_range___axiom
  use        Airbag_system__time_range___axiom
  use        Airbag_system__status_airbag_system_type___axiom
  use        Airbag_system__status_system_type___axiom
  use        Airbag_system__status_system___axiom
  use        Airbag_system__getgforce___axiom
  use        As_io_wrapper__as_put__2___axiom
  use        As_io_wrapper__as_put_line___axiom
  use        As_io_wrapper__as_get__2___axiom
  use        As_io_wrapper__as_put__3___axiom
  
  function [GP_Subp:airbag_system.ads:31] [sloc:airbag_system.ads:31] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram airbag_system.ads:31 *);
        assume
        { (Airbag_system__status_system_type___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram airbag_system.ads:31 *);
        (* Check for RTE in the Pre of the subprogram airbag_system.ads:31 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram airbag_system.ads:31 *);
        (try
        ();
          ([sloc:airbag_system.adb:10] assume
          { (Standard__integer___axiom.default_initial_assumption
               !Airbag_system__read_acceleration__v0.v0 False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Airbag_system__read_acceleration__v0.v0 False False True True) });
          ([sloc:airbag_system.adb:10] assume
          { (Standard__integer___axiom.default_initial_assumption
               !Airbag_system__read_acceleration__v1.v1 False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Airbag_system__read_acceleration__v1.v1 False False True True) });
          ([sloc:airbag_system.adb:10] assume
          { (Standard__integer___axiom.default_initial_assumption
               !Airbag_system__read_acceleration__t.t False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Airbag_system__read_acceleration__t.t False False True True) });
          ([sloc:airbag_system.adb:14] ());
          ([sloc:airbag_system.adb:23] ());
          ([sloc:airbag_system.adb:32] ());
          ();
          ([GP_Sloc:airbag_system.adb:13:7] ([sloc:airbag_system.adb:13] ()));
          ([GP_Sloc:airbag_system.adb:13:7] ([sloc:airbag_system.adb:13] (
                                             any --pp_effects NOT IMPLEMENTED
                                              pre {}
                                            post {} return unit);
          (As_io_wrapper__as_put_line___axiom.as_put_line
             (let ([mlw:proxy_symbol] [introduced] temp___215) =
             ( (Temp___String_Literal_214.temp___String_Literal_214 ())) in
             (Standard__string.of_array ([mlw:proxy_symbol]
                [introduced] temp___215) 1 39)));
          ()));
        ([GP_Sloc:airbag_system.adb:14:7] ([sloc:airbag_system.adb:14] 
                                          (* Translation of an Ada loop from airbag_system.adb:14 *);
                                          (if True then
                                          (try
                                          (* While loop translating the Ada loop from airbag_system.adb:14 *);
                                            ([sloc:airbag_system.adb:14] 
                                            loop
                                              (* Check for absence of RTE in the loop invariant and variant *)
                                              
                                              
                                              (* Assume implicit invariants from the loop airbag_system.adb:14 *);
                                              assume
                                              { (True /\
                                                   (Standard__integer___axiom.dynamic_invariant
                                                      !Airbag_system__read_acceleration__v0.v0
                                                      False True True True)
                                                   /\ True /\ True) };
                                              (* Continuation of loop after loop invariant and variant *);
                                              ();
                                              ([GP_Sloc:airbag_system.adb:15:17] 
                                              ([sloc:airbag_system.adb:15] ()));
                                              ([GP_Sloc:airbag_system.adb:15:10] 
                                              ([sloc:airbag_system.adb:15] ()));
                                              ([GP_Sloc:airbag_system.adb:15:10] 
                                              ([sloc:airbag_system.adb:15] (let ([mlw:proxy_symbol]
                                              [introduced] temp___compl_216)
                                              =
                                              !Airbag_system__read_acceleration__v0.v0
                                              in
                                              ( any
                                                 --pp_effects NOT IMPLEMENTED
                                                 pre {}
                                              post {} return unit);
                                              (As_io_wrapper__as_get__2___axiom.as_get
                                                 Airbag_system__read_acceleration__v0.v0
                                                 (let ([mlw:proxy_symbol]
                                                 [introduced] temp___218) =
                                                 ( (Temp___String_Literal_217.temp___String_Literal_217
                                                      ())) in
                                                 (Standard__string.of_array
                                                    ([mlw:proxy_symbol]
                                                    [introduced] temp___218)
                                                    1 25)));
                                              ())));
                                            ([GP_Sloc:airbag_system.adb:16:21] 
                                            ([sloc:airbag_system.adb:16] ()));
                                            ([GP_Sloc:airbag_system.adb:16:39] 
                                            ([sloc:airbag_system.adb:16] ()));
                                            ([GP_Sloc:airbag_system.adb:16:10] 
                                            ([sloc:airbag_system.adb:16] 
                                            (if
                                            (_gnatprove_standard.Boolean.andb
                                               (!Airbag_system__read_acceleration__v0.v0
                                                  > -150000)
                                               (!Airbag_system__read_acceleration__v0.v0
                                                  < 150000))
                                            then
                                            raise Airbag_system__read_acceleration__L_1.L_1
                                            )));
                                            ([GP_Sloc:airbag_system.adb:17:10] 
                                            ([sloc:airbag_system.adb:17] ()));
                                            ([GP_Sloc:airbag_system.adb:17:10] 
                                            ([sloc:airbag_system.adb:17] (
                                             any --pp_effects NOT IMPLEMENTED
                                              pre {}
                                            post {} return unit);
                                            (As_io_wrapper__as_put__2___axiom.as_put
                                               (let ([mlw:proxy_symbol]
                                               [introduced] temp___220) =
                                               ( (Temp___String_Literal_219.temp___String_Literal_219
                                                    ())) in
                                               (Standard__string.of_array
                                                  ([mlw:proxy_symbol]
                                                  [introduced] temp___220) 1
                                                  43)));
                                            ()));
                                            ([GP_Sloc:airbag_system.adb:18:10] 
                                            ([sloc:airbag_system.adb:18] ()));
                                            ([GP_Sloc:airbag_system.adb:18:10] 
                                            ([sloc:airbag_system.adb:18] (
                                             any --pp_effects NOT IMPLEMENTED
                                              pre {}
                                            post {} return unit);
                                            (As_io_wrapper__as_put__3___axiom.as_put
                                               ( 300000));
                                            ()));
                                          ([GP_Sloc:airbag_system.adb:19:10] 
                                          ([sloc:airbag_system.adb:19] ()));
                                          ([GP_Sloc:airbag_system.adb:19:10] 
                                          ([sloc:airbag_system.adb:19] (
                                           any --pp_effects NOT IMPLEMENTED
                                            pre {}
                                          post {} return unit);
                                          (As_io_wrapper__as_put_line___axiom.as_put_line
                                             (let ([mlw:proxy_symbol]
                                             [introduced] temp___222) =
                                             ( (Temp___String_Literal_221.temp___String_Literal_221
                                                  ())) in
                                             (Standard__string.of_array
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___222) 1 0)));
                                          ()));
                                          (* Check for the exit condition and loop statements appearing before the loop invariant of loop airbag_system.adb:14 *);
                                          (if False then
                                          raise Airbag_system__read_acceleration__L_1.L_1
                                          )
                                           end loop) with
        | Airbag_system__read_acceleration__L_1.L_1  -> ()) )));
([GP_Sloc:airbag_system.adb:21:7] ([sloc:airbag_system.adb:21] ()));
([GP_Sloc:airbag_system.adb:21:65] ([sloc:airbag_system.adb:21] ()));
([GP_Sloc:airbag_system.adb:21:47] ([sloc:airbag_system.adb:21] (let ([mlw:proxy_symbol]
                                   [introduced] temp___225) =
                                   (let ([mlw:proxy_symbol]
                                     [introduced] temp___224) =
                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                     in abstract ensures
                                     { True } begin  (let _ =
                                                    ([mlw:proxy_symbol]
                                                      [introduced] temp___224).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__initial_velocity_measured
                                                    in ())  end;
                                     --pp_record_update NOT IMPLEMENTED)
                                   in (
                                   Airbag_system__status_system.status_system__split_fields
                                   :=
                                   ([mlw:proxy_symbol]
                                     [introduced] temp___225).Airbag_system__status_system_type.__split_fields))));
([GP_Sloc:airbag_system.adb:22:7] ([sloc:airbag_system.adb:22] ()));
([GP_Sloc:airbag_system.adb:22:7] ([sloc:airbag_system.adb:22] ( any
                                                                  --pp_effects NOT IMPLEMENTED
                                                                  pre {
                                                                  }
                                  post {} return unit);
(As_io_wrapper__as_put_line___axiom.as_put_line (let ([mlw:proxy_symbol]
   [introduced] temp___227) =
   ( (Temp___String_Literal_226.temp___String_Literal_226 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___227) 1
      39)));
()));
([GP_Sloc:airbag_system.adb:23:7] ([sloc:airbag_system.adb:23] (* Translation of an Ada loop from airbag_system.adb:23 *);
                                  (if True then
                                  (try
                                  (* While loop translating the Ada loop from airbag_system.adb:23 *);
                                    ([sloc:airbag_system.adb:23] loop
                                                                   (* Check for absence of RTE in the loop invariant and variant *)
                                                                   
                                                                   
                                                                   (* Assume implicit invariants from the loop airbag_system.adb:23 *);
                                                                   assume
                                                                   { (
                                                                    True /\
                                                                    (Standard__integer___axiom.dynamic_invariant
                                                                    !Airbag_system__read_acceleration__v1.v1
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True) };
                                                                   (* Continuation of loop after loop invariant and variant *);
                                                                   ();
                                                                   ([GP_Sloc:airbag_system.adb:24:17] 
                                                                   ([sloc:airbag_system.adb:24] ()));
                                                                   ([GP_Sloc:airbag_system.adb:24:10] 
                                                                   ([sloc:airbag_system.adb:24] ()));
                                                                   ([GP_Sloc:airbag_system.adb:24:10] 
                                                                   ([sloc:airbag_system.adb:24] (let ([mlw:proxy_symbol]
                                                                   [introduced] temp___compl_228)
                                                                   =
                                                                   !Airbag_system__read_acceleration__v1.v1
                                                                   in
                                                                   ( any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                                                   post {
                                                                   } return
                                                                   unit);
                                                                   (As_io_wrapper__as_get__2___axiom.as_get
                                                                    Airbag_system__read_acceleration__v1.v1
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___230)
                                                                    =
                                                                    ( (
                                                                    Temp___String_Literal_229.temp___String_Literal_229
                                                                    ())) in
                                                                    (Standard__string.of_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___230)
                                                                    1 25)));
                                                                   ())));
                                    ([GP_Sloc:airbag_system.adb:25:21] 
                                    ([sloc:airbag_system.adb:25] ()));
                                    ([GP_Sloc:airbag_system.adb:25:39] 
                                    ([sloc:airbag_system.adb:25] ()));
                                    ([GP_Sloc:airbag_system.adb:25:10] 
                                    ([sloc:airbag_system.adb:25] (if
                                                                 (_gnatprove_standard.Boolean.andb
                                                                    (
                                                                    !Airbag_system__read_acceleration__v1.v1
                                                                    > -150000)
                                                                    (
                                                                    !Airbag_system__read_acceleration__v1.v1
                                                                    < 150000))
                                                                 then
                                                                 raise Airbag_system__read_acceleration__L_2.L_2
                                                                 )));
                                    ([GP_Sloc:airbag_system.adb:26:10] 
                                    ([sloc:airbag_system.adb:26] ()));
                                    ([GP_Sloc:airbag_system.adb:26:10] 
                                    ([sloc:airbag_system.adb:26] ( any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                    post {} return unit);
                                    (As_io_wrapper__as_put__2___axiom.as_put
                                       (let ([mlw:proxy_symbol]
                                       [introduced] temp___232) =
                                       ( (Temp___String_Literal_231.temp___String_Literal_231
                                            ())) in
                                       (Standard__string.of_array
                                          ([mlw:proxy_symbol]
                                          [introduced] temp___232) 1 42)));
                                    ()));
                                    ([GP_Sloc:airbag_system.adb:27:10] 
                                    ([sloc:airbag_system.adb:27] ()));
                                    ([GP_Sloc:airbag_system.adb:27:10] 
                                    ([sloc:airbag_system.adb:27] ( any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                    post {} return unit);
                                    (As_io_wrapper__as_put__3___axiom.as_put
                                       ( 300000));
                                    ()));
                                  ([GP_Sloc:airbag_system.adb:28:10] 
                                  ([sloc:airbag_system.adb:28] ()));
                                  ([GP_Sloc:airbag_system.adb:28:10] 
                                  ([sloc:airbag_system.adb:28] ( any
                                                                  --pp_effects NOT IMPLEMENTED
                                                                  pre {
                                                                  }
                                  post {} return unit);
                                  (As_io_wrapper__as_put_line___axiom.as_put_line
                                     (let ([mlw:proxy_symbol]
                                     [introduced] temp___234) =
                                     ( (Temp___String_Literal_233.temp___String_Literal_233
                                          ())) in
                                     (Standard__string.of_array
                                        ([mlw:proxy_symbol]
                                        [introduced] temp___234) 1 0)));
                                  ()));
                                  (* Check for the exit condition and loop statements appearing before the loop invariant of loop airbag_system.adb:23 *);
                                  (if False then
                                  raise Airbag_system__read_acceleration__L_2.L_2
                                  )
                                   end loop) with
| Airbag_system__read_acceleration__L_2.L_2  -> ())
)));
([GP_Sloc:airbag_system.adb:30:7] ([sloc:airbag_system.adb:30] ()));
([GP_Sloc:airbag_system.adb:30:63] ([sloc:airbag_system.adb:30] ()));
([GP_Sloc:airbag_system.adb:30:45] ([sloc:airbag_system.adb:30] (let ([mlw:proxy_symbol]
                                   [introduced] temp___237) =
                                   (let ([mlw:proxy_symbol]
                                     [introduced] temp___236) =
                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                     in abstract ensures
                                     { True } begin  (let _ =
                                                    ([mlw:proxy_symbol]
                                                      [introduced] temp___236).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__final_velocity_measured
                                                    in ())  end;
                                     --pp_record_update NOT IMPLEMENTED)
                                   in (
                                   Airbag_system__status_system.status_system__split_fields
                                   :=
                                   ([mlw:proxy_symbol]
                                     [introduced] temp___237).Airbag_system__status_system_type.__split_fields))));
([GP_Sloc:airbag_system.adb:31:7] ([sloc:airbag_system.adb:31] ()));
([GP_Sloc:airbag_system.adb:31:7] ([sloc:airbag_system.adb:31] ( any
                                                                  --pp_effects NOT IMPLEMENTED
                                                                  pre {
                                                                  }
                                  post {} return unit);
(As_io_wrapper__as_put_line___axiom.as_put_line (let ([mlw:proxy_symbol]
   [introduced] temp___239) =
   ( (Temp___String_Literal_238.temp___String_Literal_238 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___239) 1
      38)));
()));
([GP_Sloc:airbag_system.adb:32:7] ([sloc:airbag_system.adb:32] (* Translation of an Ada loop from airbag_system.adb:32 *);
                                  (if True then
                                  (try
                                  (* While loop translating the Ada loop from airbag_system.adb:32 *);
                                    ([sloc:airbag_system.adb:32] loop
                                                                   (* Check for absence of RTE in the loop invariant and variant *)
                                                                   
                                                                   
                                                                   (* Assume implicit invariants from the loop airbag_system.adb:32 *);
                                                                   assume
                                                                   { (
                                                                    True /\
                                                                    (Standard__integer___axiom.dynamic_invariant
                                                                    !Airbag_system__read_acceleration__t.t
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True) };
                                                                   (* Continuation of loop after loop invariant and variant *);
                                                                   ();
                                                                   ([GP_Sloc:airbag_system.adb:33:17] 
                                                                   ([sloc:airbag_system.adb:33] ()));
                                                                   ([GP_Sloc:airbag_system.adb:33:10] 
                                                                   ([sloc:airbag_system.adb:33] ()));
                                                                   ([GP_Sloc:airbag_system.adb:33:10] 
                                                                   ([sloc:airbag_system.adb:33] (let ([mlw:proxy_symbol]
                                                                   [introduced] temp___compl_240)
                                                                   =
                                                                   !Airbag_system__read_acceleration__t.t
                                                                   in
                                                                   ( any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                                                   post {
                                                                   } return
                                                                   unit);
                                                                   (As_io_wrapper__as_get__2___axiom.as_get
                                                                    Airbag_system__read_acceleration__t.t
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___242)
                                                                    =
                                                                    ( (
                                                                    Temp___String_Literal_241.temp___String_Literal_241
                                                                    ())) in
                                                                    (Standard__string.of_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___242)
                                                                    1 25)));
                                                                   ())));
                                    ([GP_Sloc:airbag_system.adb:34:21] 
                                    ([sloc:airbag_system.adb:34] ()));
                                    ([GP_Sloc:airbag_system.adb:34:33] 
                                    ([sloc:airbag_system.adb:34] ()));
                                    ([GP_Sloc:airbag_system.adb:34:10] 
                                    ([sloc:airbag_system.adb:34] (if
                                                                 (_gnatprove_standard.Boolean.andb
                                                                    (
                                                                    !Airbag_system__read_acceleration__t.t
                                                                    > 0)
                                                                    (
                                                                    !Airbag_system__read_acceleration__t.t
                                                                    <= 1000))
                                                                 then
                                                                 raise Airbag_system__read_acceleration__L_3.L_3
                                                                 )));
                                    ([GP_Sloc:airbag_system.adb:35:10] 
                                    ([sloc:airbag_system.adb:35] ()));
                                    ([GP_Sloc:airbag_system.adb:35:10] 
                                    ([sloc:airbag_system.adb:35] ( any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                    post {} return unit);
                                    (As_io_wrapper__as_put__2___axiom.as_put
                                       (let ([mlw:proxy_symbol]
                                       [introduced] temp___244) =
                                       ( (Temp___String_Literal_243.temp___String_Literal_243
                                            ())) in
                                       (Standard__string.of_array
                                          ([mlw:proxy_symbol]
                                          [introduced] temp___244) 1 37)));
                                    ()));
                                    ([GP_Sloc:airbag_system.adb:36:10] 
                                    ([sloc:airbag_system.adb:36] ()));
                                    ([GP_Sloc:airbag_system.adb:36:10] 
                                    ([sloc:airbag_system.adb:36] ( any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                    post {} return unit);
                                    (As_io_wrapper__as_put__3___axiom.as_put
                                       ( 1000));
                                    ()));
                                  ([GP_Sloc:airbag_system.adb:37:10] 
                                  ([sloc:airbag_system.adb:37] ()));
                                  ([GP_Sloc:airbag_system.adb:37:10] 
                                  ([sloc:airbag_system.adb:37] ( any
                                                                  --pp_effects NOT IMPLEMENTED
                                                                  pre {
                                                                  }
                                  post {} return unit);
                                  (As_io_wrapper__as_put_line___axiom.as_put_line
                                     (let ([mlw:proxy_symbol]
                                     [introduced] temp___246) =
                                     ( (Temp___String_Literal_245.temp___String_Literal_245
                                          ())) in
                                     (Standard__string.of_array
                                        ([mlw:proxy_symbol]
                                        [introduced] temp___246) 1 0)));
                                  ()));
                                  (* Check for the exit condition and loop statements appearing before the loop invariant of loop airbag_system.adb:32 *);
                                  (if False then
                                  raise Airbag_system__read_acceleration__L_3.L_3
                                  )
                                   end loop) with
| Airbag_system__read_acceleration__L_3.L_3  -> ())
)));
([GP_Sloc:airbag_system.adb:39:7] ([sloc:airbag_system.adb:39] ()));
([GP_Sloc:airbag_system.adb:39:60] ([sloc:airbag_system.adb:39] ()));
([GP_Sloc:airbag_system.adb:39:46] ([sloc:airbag_system.adb:39] (let ([mlw:proxy_symbol]
                                   [introduced] temp___249) =
                                   (let ([mlw:proxy_symbol]
                                     [introduced] temp___248) =
                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                     in abstract ensures
                                     { True } begin  (let _ =
                                                    ([mlw:proxy_symbol]
                                                      [introduced] temp___248).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__time_difference_measured
                                                    in ())  end;
                                     --pp_record_update NOT IMPLEMENTED)
                                   in (
                                   Airbag_system__status_system.status_system__split_fields
                                   :=
                                   ([mlw:proxy_symbol]
                                     [introduced] temp___249).Airbag_system__status_system_type.__split_fields))));
([GP_Sloc:airbag_system.adb:40:7] ([sloc:airbag_system.adb:40] ()));
([GP_Sloc:airbag_system.adb:40:75] ([sloc:airbag_system.adb:40] ()));
([GP_Sloc:airbag_system.adb:40:78] ([sloc:airbag_system.adb:40] ()));
([GP_Sloc:airbag_system.adb:40:81] ([sloc:airbag_system.adb:40] ()));
([GP_Sloc:airbag_system.adb:40:65] ([sloc:airbag_system.adb:40] ()));
([GP_Sloc:airbag_system.adb:40:43] ([sloc:airbag_system.adb:40] (let ([mlw:proxy_symbol]
                                   [introduced] temp___252) =
                                   (let ([mlw:proxy_symbol]
                                     [introduced] temp___251) =
                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                     in abstract ensures
                                     { True } begin  (let _ =
                                                    ([mlw:proxy_symbol]
                                                      [introduced] temp___251).Airbag_system__status_system_type.__split_fields.Airbag_system__status_system_type.rec__airbag_system__status_system_type__acceleration_measured
                                                    in ())  end;
                                     --pp_record_update NOT IMPLEMENTED)
                                   in (
                                   Airbag_system__status_system.status_system__split_fields
                                   :=
                                   ([mlw:proxy_symbol]
                                     [introduced] temp___252).Airbag_system__status_system_type.__split_fields))));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = True in ())  end

end
